Resume-Job Compatibility Analyzer - Full Stack ML Project
Project Overview
Create a fully functional web application that analyzes resume-job description compatibility using machine learning. The system should provide compatibility scores and improvement recommendations for job seekers.
Technical Requirements
Backend (Python - Flask)

ML Algorithm: Implement Naive Bayes classification from scratch (no sklearn/nltk)
API Endpoints: RESTful API for resume analysis
Data Processing: Text preprocessing, feature extraction, and scoring
Training System: Built-in training data and model training functionality

Frontend (HTML/CSS/JavaScript)

Modern UI: Clean, responsive design with professional styling
Interactive Forms: Text areas for resume and job description input
Real-time Analysis: AJAX calls to backend API
Results Display: Compatibility score, detailed breakdown, and recommendations
Visual Elements: Progress bars, charts, and color-coded results

Core Features to Implement
1. Machine Learning Engine (Python)
python# Key components to implement from scratch:
class ResumeAnalyzer:
    - Text preprocessing (no external libraries)
    - Feature extraction (skills, experience, keywords)
    - Naive Bayes classifier implementation
    - Probability calculations and predictions
    - Recommendation generation system
2. Flask Backend Structure
/api/analyze - POST endpoint for resume analysis
/api/train - POST endpoint to retrain model
/api/health - GET endpoint for system status
3. Frontend Components

Input Section: Dual text areas for resume and job description
Analysis Button: Trigger analysis with loading animation
Results Dashboard:

Compatibility score (0-100%)
Compatibility level (Excellent/Good/Fair/Poor)
Detailed skill breakdown
Experience matching analysis
Improvement recommendations list


Progress Indicators: Visual feedback during processing

Implementation Specifications
ML Algorithm Details (Implement from Scratch)

Text Preprocessing:

Convert to lowercase
Remove punctuation using regex
Filter stop words (manually defined list)
Tokenization


Feature Engineering:

Skill matching across categories (programming, frameworks, tools)
Experience level extraction using regex patterns
Text similarity metrics (Jaccard similarity)
Keyword overlap calculations


Naive Bayes Classification:

Training with probability calculations
Laplace smoothing for unseen words
Log probabilities to prevent underflow
Class prediction with confidence scores


Recommendation Engine:

Gap analysis for missing skills
Priority-based suggestions (High/Medium/Low)
Specific improvement advice
Impact estimation



Frontend Design Requirements

Color Scheme: Professional blue/green gradient theme
Typography: Clean, readable fonts (Google Fonts)
Layout: Responsive grid system (mobile-friendly)
Animations: Smooth transitions and loading effects
Charts: Simple CSS-based progress bars and score displays

Sample Training Data (Include in Code)
pythontraining_data = [
    ("Python developer 5 years Django Flask", "Senior Python Django developer", "high"),
    ("Fresh graduate Java basics", "Senior Java developer 5+ years", "low"),
    # Add 15-20 more examples across different skill levels
]
File Structure to Create
resume-analyzer/
├── app.py (Flask backend)
├── ml_engine.py (ML implementation)
├── templates/
│   └── index.html (Main UI)
├── static/
│   ├── style.css (Styling)
│   ├── script.js (Frontend logic)
│   └── charts.js (Visual components)
└── data/
    └── training_data.py (Sample training data)
UI/UX Specifications
Main Interface Layout

Header: Project title and brief description
Input Section:

Resume text area (left side)
Job description text area (right side)
"Analyze Compatibility" button (center)


Results Section (appears after analysis):

Large compatibility score display (0-100%)
Color-coded compatibility level
Detailed breakdown cards
Recommendations list with priority indicators



Visual Design Elements

Score Display: Large circular progress indicator
Skill Breakdown: Horizontal progress bars with percentages
Recommendations: Card-based layout with priority badges
Loading State: Spinner animation during analysis
Responsive: Works on desktop, tablet, and mobile

API Response Format
json{
    "compatibility_score": 0.75,
    "compatibility_level": "Good Match",
    "detailed_analysis": {
        "skill_matches": {
            "Programming": "80%",
            "Frameworks": "60%",
            "Tools": "70%"
        },
        "experience_match": "85%",
        "text_similarity": "65%"
    },
    "recommendations": [
        {
            "category": "Skills",
            "priority": "High",
            "suggestion": "Consider learning React and Node.js",
            "impact": "Can improve compatibility by 15%"
        }
    ],
    "improvement_potential": "+18%"
}
Functionality Requirements
Core Operations

Text Input: Accept resume and job description via web form
Real-time Analysis: Process text and return results within 2-3 seconds
Score Calculation: Generate compatibility score (0.0-1.0) converted to percentage
Recommendations: Provide 3-5 specific improvement suggestions
Visual Feedback: Show analysis progress and results with animations

Error Handling

Input validation for empty or too short texts
Graceful error messages for analysis failures
Loading states and timeout handling

Performance Features

Client-side input validation
Debounced analysis requests
Cached results for identical inputs
Responsive design for all devices

Technical Constraints

No External ML Libraries: Implement Naive Bayes from scratch
Pure Python: Only use built-in Python libraries (re, math, collections)
Vanilla JavaScript: No frameworks like React/Vue (plain JS only)
CSS Grid/Flexbox: Modern CSS for responsive layout
Flask Minimal: Use Flask with minimal dependencies

Success Criteria

Functional ML Model: Accurate compatibility scoring with reasonable results
Professional UI: Clean, intuitive interface with good UX
Real-time Performance: Analysis completes within 3 seconds
Actionable Recommendations: Specific, helpful improvement suggestions
Responsive Design: Works seamlessly across different screen sizes
Error-free Operation: Handles edge cases and provides appropriate feedback

Bonus Features (If Time Permits)

Export analysis results as PDF
Save/load previous analyses
Multiple job comparison mode
Skill trend analysis over time
Admin panel for model retraining

Deployment Configuration

Configure for Replit hosting
Include requirements.txt (minimal dependencies)
Set up proper Flask routes and static file serving
Ensure CORS handling for API calls

Please create a complete, working implementation with all files properly structured and fully functional features. The project should be ready to run immediately in Replit with professional-grade code quality and user experience.